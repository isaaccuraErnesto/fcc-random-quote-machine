{"version":3,"sources":["components/Button.js","components/Share.js","components/Buttons.js","components/Quote.js","components/Author.js","components/QuoteBox.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Button","text","onClick","id","Share","title","href","className","alt","quote","content","author","target","rel","style","verticalAlign","Buttons","Quote","cite","Author","QuoteBox","Footer","App","useState","setQuote","useEffect","fetchRandomQuote","a","fetch","response","ok","Error","status","statusText","json","data","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAoBeA,EAlBA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACpB,OACI,wBACAC,GAAG,YACHD,QAASA,EAFT,SAICD,KCmBMG,EAzBD,SAAC,GAAgD,IAA9CD,EAA6C,EAA7CA,GAAIE,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC9C,OACI,mBACAH,KAAMA,EAAK,YAAYG,EAAMC,QAAQ,gBAAgBD,EAAME,OAAO,mDAClER,GAAIA,EACJE,MAAOA,EACPO,OAAO,SACPC,IAAI,aACJL,IAAKA,EANL,SAQA,mBAAGD,UAAWA,EAAWO,MAAO,CAACC,cAAe,eCCzCC,EAVC,SAAC,GAA0B,IAAzBd,EAAwB,EAAxBA,QAASO,EAAe,EAAfA,MAAON,EAAQ,EAARA,GAC9B,OACI,sBAAKA,GAAIA,EAAT,UACI,cAAC,EAAD,CAAOA,GAAG,cAAcE,MAAM,+BAA+BC,KAAK,mCAAmCC,UAAU,gBAC/GC,IAAI,eAAeC,MAAOA,IAC1B,cAAC,EAAD,CAAQR,KAAK,YAAYC,QAASA,QCA/Be,EARD,SAAC,GAAa,IAAZR,EAAW,EAAXA,MACZ,OACI,6BAAYN,GAAG,OAAOe,KAAK,yCAA3B,cACMT,EAAMC,QADZ,QCMOS,EARA,SAAC,GAAa,IAAZV,EAAW,EAAXA,MACb,OACI,6BAAYN,GAAG,SAAf,oBACaM,EAAME,WCUZS,EATE,SAAC,GAAa,IAAZX,EAAW,EAAXA,MACf,OACI,yBAAQN,GAAG,mBAAX,UACI,cAAC,EAAD,CAAOM,MAAOA,IACd,cAAC,EAAD,CAAQA,MAAOA,QCAZY,EARA,WACX,OACI,qBAAKlB,GAAG,SAAR,SACI,2CAAe,4DCqCZmB,MAlCf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOd,EAAP,KAAce,EAAd,KAEAC,qBAAU,WACRC,MACC,IAIH,IAAMA,EAAgB,uCAAG,8BAAAC,EAAA,+EAEEC,MAAM,8DAFR,WAEfC,EAFe,QAGPC,GAHO,sBAGG,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,YAAgCH,EAASI,aAH5C,uBAIFJ,EAASK,OAJP,OAIfC,EAJe,OAKrBX,EAASW,GALY,kDAOnBC,QAAQC,IAAR,MACAb,EAAS,CAACd,QAAS,8BAA+BC,OAAQ,gBARvC,0DAAH,qDActB,OACE,sBAAKJ,UAAU,kCAAf,UACE,uBAAMJ,GAAG,YAAT,UACE,cAAC,EAAD,CAAUM,MAAOA,IACjB,cAAC,EAAD,CAASN,GAAG,UAAUM,MAAQA,EAAOP,QAASwB,OAEhD,cAAC,EAAD,QCvBSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d12315d4.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Button = ({ text, onClick }) => {\r\n    return (\r\n        <button\r\n        id='new-quote'\r\n        onClick={onClick}\r\n        >\r\n        {text}\r\n        </button>\r\n)\r\n\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    color: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n}\r\n\r\nexport default Button","import PropTypes from 'prop-types'\r\n\r\nconst Share = ({ id, title, href, className, alt, quote }) => {\r\n    return (\r\n        <a\r\n        href={href+\"?text=%27\"+quote.content+\"%27%20%20-%20\"+quote.author+\"&hashtags=quote,inspirational,randomquotemachine\"}\r\n        id={id}\r\n        title={title}\r\n        target='_blank'\r\n        rel='noreferrer'\r\n        alt={alt}\r\n        >\r\n        <i className={className} style={{verticalAlign: 'middle'}}></i>\r\n        </a>\r\n)\r\n\r\n}\r\n\r\nShare.propTypes = {\r\n    id: PropTypes.string,\r\n    title: PropTypes.string,\r\n    href: PropTypes.string,\r\n    className: PropTypes.string,\r\n    alt: PropTypes.string,\r\n    quote: PropTypes.object\r\n}\r\n\r\nexport default Share","import Button from './Button'\r\nimport Share from './Share'\r\n\r\nconst Buttons = ({onClick, quote, id}) => {\r\n    return (\r\n        <div id={id}>\r\n            <Share id='tweet-quote' title='Share this quote on Twitter!' href='https://twitter.com/intent/tweet' className='fa fa-twitter'\r\n            alt='Twitter Icon' quote={quote}/>\r\n            <Button text='New Quote' onClick={onClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons\r\n","const Quote = ({quote}) => {\r\n    return (\r\n        <blockquote id='text' cite='https://github.com/lukePeavey/quotable'>\r\n            \"{quote.content}\"\r\n        </blockquote>\r\n    )\r\n}\r\n\r\nexport default Quote\r\n","const Author = ({quote}) => {\r\n    return (\r\n        <figcaption id='author'>\r\n            &mdash; {quote.author}\r\n        </figcaption>\r\n    )\r\n}\r\n\r\nexport default Author\r\n","import Quote from './Quote'\r\nimport Author from './Author'\r\n\r\n\r\nconst QuoteBox = ({quote}) => {\r\n    return (\r\n        <figure id='quote-and-author'>\r\n            <Quote quote={quote}/>\r\n            <Author quote={quote}/>            \r\n        </figure>\r\n    )\r\n}\r\n\r\nexport default QuoteBox\r\n","const Footer = () => {\r\n    return (\r\n        <div id='footer'>\r\n            <p>&copy; 2021 <strong>ernestoIsaaccura</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { useState, useEffect } from 'react'\nimport Buttons from \"./components/Buttons\";\nimport QuoteBox from \"./components/QuoteBox\";\nimport Footer from './components/Footer';\n\n\nfunction App() {\n  const [quote, setQuote] = useState({})\n\n  useEffect(() => {\n    fetchRandomQuote()\n  }, [])\n\n  //Fetching Quote Data from API\n\n  const fetchRandomQuote = async () => {\n    try {\n      const response = await fetch('https://api.quotable.io/random?minLength=100&maxLength=120')\n      if (!response.ok) throw new Error(`${response.status} ${response.statusText}`)\n      const data = await response.json()\n      setQuote(data);\n    } catch (err) {\n        console.log(err);\n        setQuote({content: 'Oops! Something went wrong.', author: 'Error Maker'});\n      }\n  }\n\n  //Rendering\n\n  return (\n    <div className='App container-fluid text-center'>\n      <main id='quote-box'>\n        <QuoteBox quote={quote}/>\n        <Buttons id='buttons' quote= {quote} onClick={fetchRandomQuote}/>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}